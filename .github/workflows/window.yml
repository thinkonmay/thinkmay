---
name: CI

on:
  push:
    branches: [master]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  github_env:
    name: GitHub Env Debug
    runs-on: ubuntu-latest

    steps:
      - name: Dump github context
        run: echo "$GITHUB_CONTEXT"
        shell: bash
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}


  build_sunshine:
    name: Sunshine Win
    runs-on: windows-2025

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Dependencies Windows
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          install: >-
            wget

      - name: Update Windows dependencies
        shell: msys2 {0}
        run: |
          # download working curl
          wget https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-curl-8.8.0-1-any.pkg.tar.zst

          # install dependencies
          pacman -U --noconfirm mingw-w64-x86_64-curl-8.8.0-1-any.pkg.tar.zst
          pacman -Syu --noconfirm \
            --ignore=mingw-w64-x86_64-curl \
            git \
            mingw-w64-x86_64-boost \
            mingw-w64-x86_64-cmake \
            mingw-w64-x86_64-cppwinrt \
            mingw-w64-x86_64-graphviz \
            mingw-w64-x86_64-miniupnpc \
            mingw-w64-x86_64-nlohmann-json \
            mingw-w64-x86_64-nodejs \
            mingw-w64-x86_64-nsis \
            mingw-w64-x86_64-onevpl \
            mingw-w64-x86_64-openssl \
            mingw-w64-x86_64-opus \
            mingw-w64-x86_64-toolchain

      - name: Build Windows
        shell: msys2 {0}
        run: |
          cd ./worker/sunshine
          mkdir build
          cd build
          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -G "Ninja" \
            ..
          ninja

      - name: Package Windows
        shell: msys2 {0}
        run: |
          mkdir -p artifacts
          cp ./worker/sunshine/build/sunshine.exe ./artifacts/shmsunshine.exe


      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sunshine-windows
          path: artifacts

  build_daemon:
    name: Daemon Win
    runs-on: windows-2025

    steps:
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23

      - uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GH_TOKEN }}

      - name: build
        run: |
          cd ./worker/daemon
          go mod download
          go build -o daemon.exe -buildvcs=false ./cmd/
          go build -o pb.exe -buildvcs=false ./pocketbase/cmd/


      - name: Package Windows
        run: |
          mkdir -p artifacts
          cp ./worker/daemon/daemon.exe ./artifacts/daemon.exe
          cp ./worker/daemon/pb.exe ./artifacts/pb.exe


      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: daemon-windows
          path: artifacts/ 


  build_package: 
    name: Package Win
    runs-on: windows-2025
    needs: [build_daemon,build_sunshine]

    steps:
      - name: Install NSIS
        run: |
          iwr -useb get.scoop.sh -outfile 'install.ps1'
          .\install.ps1 -RunAsAdmin
          scoop update
          scoop bucket add extras
          scoop install nsis

      - uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GH_TOKEN }}

      - uses: actions/download-artifact@v4
        name: download sunshine
        with:
          name: sunshine-windows
          path: sunshine
      - uses: actions/download-artifact@v4
        name: download daemon
        with:
          name: daemon-windows
          path: daemon
      - name: build
        shell: powershell
        run: |
          mkdir -p artifacts
          cp daemon/daemon.exe ./assets
          cp sunshine/shmsunshine.exe ./assets

          ./nsis.ps1
          cp installer.exe ./artifacts

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: msi-windows
          path: artifacts
  

  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: [build_package]
    steps:
      - uses: actions/download-artifact@v4
        name: download msi
        with:
          name: msi-windows
          path: artifacts
      - name: upload
        shell: bash
        run: >-
          curl https://play.2.thinkmay.net:445/api/collections/binaries/records 
          -H "Content-Type: multipart/form-data" 
          --form "name=thinkmay_binary_window" 
          --form "file=@./artifacts/installer.exe"  
          --progress-bar 

